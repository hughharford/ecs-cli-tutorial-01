# URL:
https://dev.to/raphaelmansuy/10-minutes-to-deploy-a-docker-compose-stack-on-aws-illustrated-with-hasura-and-postgres-3f6e



# CREATE KEY PAIR CALLED tutorial-cluster

aws ec2 create-key-pair --key-name tutorial-cluster \
 --query 'KeyMaterial' --output text > ~/.ssh/tutorial-cluster.pem




# LOCALLY TEST docker-compose.yml

docker compose up




# TO RUN DOCKER-COMPOSE.YML ON AWS

ecs-cli compose --project-name tutorial  --file docker-compose.yml \
--debug service up  \
--deployment-max-percent 100 --deployment-min-healthy-percent 0 \
--region eu-west-2 --ecs-profile tutorial --cluster-config tutorial



# RUN LIST TO SEE WHAT IS RUNNING:

ecs-cli ps



# OPEN WEBSITE TO MATCH THE ABOVE OUTPUTS:

open http://18.170.60.183


# Open the port 22 to connect to the EC2 instances of the cluster

# Get my IP
myip="$(dig +short myip.opendns.com @resolver1.opendns.com)"

# Get the security group
sg="$(aws ec2 describe-security-groups   --filters Name=tag:project,Values=tutorial-cluster | jq '.SecurityGroups[].GroupId')"

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
###                                   THE ABOVE DIDN'T IMMEDIATELY RETURN ANYTHING - i.e. sg was ""
###       ADJUSTED THE ABOVE and manually retrieved and filled sg variable:
###       Used 
###           aws ec2 describe-security-groups
###
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Add port 22 to the Security Group of the VPC
aws ec2 authorize-security-group-ingress \
        --group-id $sg \
        --protocol tcp \
        --port 22 \
        --cidr "$myip/32" | jq '.'





# CONNECT TO THE INSTANCE:

chmod 400 ~/.ssh/tutorial-cluster.pem
ssh -i ~/.ssh/tutorial-cluster.pem ec2-user@18.170.60.183

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
###       
###       DID NOT CONNECT - OR AT LEAST NOT TO A COMMAND LINE
###       
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#################### #################### #################### ####################
# STILL DIDN'T GET TO THIS WORKING ................................
#################### #################### #################### ####################

# ONCE ON THE INSTANCE, HAVE A CHECK AND SEE WHAT DOCKERS RUNNING

docker ps

Can see the service, instances etc running - going into start up/then stopping etc
But haven't managed to sort the ec2 ssh login and run. Suspect the dockerfile 
doesn't support the equivalent of docker run -it - but just a guess.

#################### #################### #################### ####################
# STILL DIDN'T GET TO THIS WORKING ................................
#################### #################### #################### ####################



# TRYING THE NEXT BIT WITH LOGGING

ecs-cli compose --project-name tutorial  --file docker-compose.yml \
--debug service up \
--deployment-max-percent 100 --deployment-min-healthy-percent 0 \
--region eu-west-2 --ecs-profile tutorial --cluster-config tutorial \
--create-log-groups

# Can see logs on AWS Cloudwatch



# DELETE THE service

ecs-cli compose --project-name tutorial  --file docker-compose.yml \
--debug service down  \
--region eu-west-2 --ecs-profile tutorial --cluster-config tutorial



# RUN THE POSTGRES AND HASURA ON AWS VIA DOCKER-COMPOSE

ecs-cli compose --project-name tutorial  --file docker-compose.yml \
 --debug service up  \
--deployment-max-percent 100 --deployment-min-healthy-percent 0 \
  --region eu-west-2 --ecs-profile tutorial \
--cluster-config tutorial --create-log-groups




# LIST THE CONTAINERS RUNNING ON AWS:

ecs-cli ps




# USE THE IP TO OPEN THE PAGE RUNNING ON HASURA

open http://18.171.62.211 





# STOP THE STACK, from the host command line:

ecs-cli compose down

# this compose down did not stop the instances or the service on AWS
# tried:
ecs-cli compose down & [got more information out, but still no result]
and 
ecs-cli compose down --force [failed, cannot force like that]

# manually terminated instances and service







# NOW TO CREATE FILESYSTEM ON AWS EFS TO GO ALONGSIDE:

aws efs create-file-system \
    --performance-mode generalPurpose \
    --throughput-mode bursting \
    --encrypted \
    --tags Key=Name,Value=hasura-db-filesystem

Worked nicely, once FullAccess for EFS ElasticFileSystem was added to the User Group

REMEMBER TO CAPTURE OUTPUT, NEED fs REFERENCE:...


###############################################################################
#         MANUALLY CREATED EFS FILESYSTEM
###############################################################################

hasura-db-filesystem-manual (fs-027a8594c30ceddd6)
fs-027a8594c30ceddd6



# ADD MOUNT POINTS TO EACH SUBNET OF THE VPC

aws ec2 describe-subnets --filters Name=tag:project,Values=tutorial-cluster \
 | jq ".Subnets[].SubnetId" | \
xargs -ISUBNET  aws efs create-mount-target \
 --file-system-id fs-027a8594c30ceddd6 --subnet-id SUBNET

This fails to create as expected. the describe yields nothing...
Trying:

aws efs create-mount-target \
 --file-system-id fs-027a8594c30ceddd6 --subnet-id SUBNET

RESPONSE:
Parameter validation failed:
Invalid length for parameter SubnetId, value: 6, valid min length: 15
TRYING:

aws efs create-mount-target \
 --file-system-id fs-027a8594c30ceddd6 \
 --subnet-id tutorial-cluster-fs-027a8594c30ceddd6

RESPONSE:
An error occurred (ValidationException) when calling the CreateMountTarget operation: 
1 validation error detected: Value 'tutorial-cluster-fs-027a8594c30ceddd6' 
at 'subnetId' failed to satisfy constraint: 
Member must satisfy regular expression pattern: ^subnet-[0-9a-f]{8,40}$
TRYING:

aws efs create-mount-target \
 --file-system-id fs-027a8594c30ceddd6 \
 --subnet-id subnet-027a8594c30ceddd6

RESPONSE:
An error occurred (FileSystemNotFound) when calling the CreateMountTarget 
operation: File system 'fs-027a8594c30ceddd6' does not exist.


################
# BIGGER STEP (2)
# The next step is to allow NFS connection from the VPC

# get sg Security Group associated with each mount target

efs_sg=$(aws efs describe-mount-targets --file-system-id fs-0fe01fbe930d1969b \
| jq ".MountTargets[0].MountTargetId" \
  | xargs -IMOUNTG aws efs describe-mount-target-security-groups \
  --mount-target-id MOUNTG | jq ".SecurityGroups[0]" | xargs echo )




### GOT PAST THIS VIA SCRIPTS.... JUST CANNOT GET THE SERVICE TO START
# 
sh 03_up.sh 

Just doesn't complete...

### AWS ECS definitely shows db_data as a volume attached to the tutorial service 
# So something definitely working...

# TRYING AGAIN, COPY FROM THE WEB REF then adjust:

ecs-cli compose --project-name tutorial  --file docker-compose.yml \
 --debug service up  \
--deployment-max-percent 100 --deployment-min-healthy-percent 0 \
  --region eu-west-2 --ecs-profile tutorial \
--cluster-config tutorial --create-log-groups

RESPONSE:

EBU[0000] Parsing the compose yaml...                  
DEBU[0000] Docker Compose version found: 3              
DEBU[0000] Parsing v3 project...                        
WARN[0000] Skipping unsupported YAML option for service...  option name=restart service name=postgres
WARN[0000] Skipping unsupported YAML option for service...  option name=depends_on service name=graphql-engine
WARN[0000] Skipping unsupported YAML option for service...  option name=restart service name=graphql-engine
DEBU[0000] Parsing the ecs-params yaml...               
DEBU[0000] Parsing the ecs-registry-creds yaml...       
DEBU[0000] Transforming yaml to task definition...      
DEBU[0000] Finding task definition in cache or creating if needed  TaskDefinition="
{\n  ContainerDefinitions: 
  [{\n      
    Command: [],\n
    Cpu: 0,\n
    DnsSearchDomains: [],\n
    DnsServers: [],\n
    DockerSecurityOptions: [],\n
    EntryPoint: [],\n
    Environment: [{\n
    Name: \"POSTGRES_PASSWORD\",\n
    Value: \"postgrespassword\"\
  }],\n
  Essential: true,\n
  ExtraHosts: [],\n
  Image: \"postgres:12\",\n
  Links: [],\n
  LinuxParameters: {\n
    Capabilities: {\n\n
                  },\n
    Devices: []\n
    },\n
  LogConfiguration: {\n
    LogDriver: \"awslogs\",\n
            Options: {\n
              awslogs-group: \"tutorial\",\n
              awslogs-region: \"eu-west-2\",\n
              awslogs-stream-prefix: \"hasura-postgres\"\name
                    }\n      
                    },\n
  Memory: 512,\n
  MountPoints: [{\n
                ContainerPath: \"/var/lib/postgresql/data\",\n
                ReadOnly: false,\n
                SourceVolume: \"db_data\"\n
                }],\n
  Name: \"postgres\",\n
  Privileged: false,\n
  PseudoTerminal: false,\n
  ReadonlyRootFilesystem: false\n
},
  {\n
    Command: [],\n
    Cpu: 0,\n
    DnsSearchDomains: [],\n
    DnsServers: [],\n
    DockerSecurityOptions: [],\n
    EntryPoint: [],\n
    Environment: [\n
      {\n
        Name: \"HASURA_GRAPHQL_DATABASE_URL\",\n
        Value: \"postgres://postgres:postgrespassword@postgres:5432/postgres\"\n
      },\n
      {\n
        Name: \"HASURA_GRAPHQL_ENABLE_CONSOLE\",\n
        Value: \"true\"\n
      },\n        {\n          Name: \"HASURA_GRAPHQL_DEV_MODE\",\n          Value: \"true\"\n        },\n        {\n          Name: \"HASURA_GRAPHQL_ENABLED_LOG_TYPES\",\n          Value: \"startup, http-log, webhook-log, websocket-log, query-log\"\n        }\n      ],\n      Essential: true,\n      ExtraHosts: [],\n      Image: \"hasura/graphql-engine:v1.3.3\",\n      Links: [\"postgres\"],\n      LinuxParameters: {\n        Capabilities: {\n\n        },\n        Devices: []\n      },\n      LogConfiguration: {\n        LogDriver: \"awslogs\",\n        Options: {\n          awslogs-region: \"eu-west-2\",\n          awslogs-stream-prefix: \"hasura\",\n          awslogs-group: \"tutorial\"\n        }\n      },\n      Memory: 512,\n      Name: \"graphql-engine\",\n      PortMappings: [{\n          ContainerPort: 8080,\n          HostPort: 80,\n          Protocol: \"tcp\"\n        }],\n      Privileged: false,\n      PseudoTerminal: false,\n      ReadonlyRootFilesystem: false\n    }],\n  Cpu: \"\",\n  ExecutionRoleArn: \"\",\n  Family: \"tutorial\",\n  Memory: \"\",\n  NetworkMode: \"bridge\",\n  RequiresCompatibilities: [\"EC2\"],\n  TaskRoleArn: \"\",\n  Volumes: [{\n      EfsVolumeConfiguration: {\n        AuthorizationConfig: {\n\n        },\n        FileSystemId: \"fs-027a8594c30ceddd6\",\n        TransitEncryption: \"ENABLED\"\n      },\n      Name: \"db_data\"\n    }]\n}"
DEBU[0000] cache miss                                    taskDef="{\n\n}" taskDefHash=51d998e631e1d6548ad311d5c1e6603d
INFO[0000] Using ECS task definition                     TaskDefinition="tutorial:7"
WARN[0000] Failed to create log group tutorial in eu-west-2: The specified log group already exists 
WARN[0000] Failed to create log group tutorial in eu-west-2: The specified log group already exists 
INFO[0000] Updated the ECS service with a new task definition. Old containers will be stopped automatically, and replaced with new ones  deployment-max-percent=100 deployment-min-healthy-percent=0 desiredCount=1 force-deployment=false service=tutorial




